{"version":3,"sources":["components/Cloud.js","components/UploadBox.js","App.js","reducer.js","store.js","index.js"],"names":["Cloud","store","store_data","getState","callbacks","getWordColor","word","value","freq","data","total","colors","Map","keys","key","get","determineColor","options","rotations","rotationAngles","enableTooltip","fontFamily","fontSizes","words","minSize","UploadBox","useState","show","setShow","handleReset","dispatch","type","payload","class","id","accept","record","title","showUIAudio","audioURL","audio","url","handleAudioStop","handleAudioUpload","file","reader","FileReader","readAsDataURL","onload","result","window","alert","onClick","$","ajax","text","document","getElementById","async","timeout","success","msg","console","log","error","connect","state","getWords","push","Math","random","countWords","sum","initialState","blob","chunks","duration","h","m","s","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode"],"mappings":"iSAoDeA,EAjDD,SAACC,GACX,IAAIC,EAAaD,EAAMA,MAAMA,MAAME,WAuB7BC,EAAY,CACdC,aAAc,SAAAC,GAAI,OAtBC,SAACC,GACpB,IAD8B,EACxBC,EAAOD,EAAQL,EAAWO,KAAKC,MAC/BC,EAAS,IAAIC,IAAI,CACnB,CAAC,GAAK,QACN,CAAC,GAAK,QACN,CAAC,GAAK,UACN,CAAC,GAAK,cACN,CAAC,GAAK,UACN,CAAC,GAAK,WACN,CAAC,GAAK,aAToB,cAYZD,EAAOE,QAZK,IAY9B,2BAAiC,CAAC,IAAvBC,EAAsB,QAC7B,GAAIN,EAAOM,EACP,OAAOH,EAAOI,IAAID,IAdI,8BAkB9B,MAAO,QAIeE,CAAeV,EAAKC,SAc9C,OACI,cAAC,IAAD,CACIH,UAAaA,EACba,QAbQ,CACZC,UAAW,EACXC,eAAgB,CAAC,GACjBC,eAAe,EACfC,WAAY,YAGZC,UAAW,CAAC,GAAI,KAOZC,MAAStB,EAAMA,MAAMsB,MACrBC,QAAS,M,iCC6DNC,G,YAtGG,SAACxB,GACf,IAAIC,EAAaD,EAAMA,MAAMA,MAAME,WACnC,EAAwBuB,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA2BMC,EAAc,WAChBD,GAAQ,GACR3B,EAAMA,MAAM6B,SAAS,CACjBC,KAAM,aACNC,QAAS,QAoCjB,OAAIL,EAEI,gCACI,oBAAIM,MAAM,SAAV,SAAmB,qEACnB,0BAAUA,MAAM,iBAAiBC,GAAG,YAApC,6BACA,qBAAKD,MAAM,aAAX,SACI,uBAAOF,KAAK,OAAOI,OAAO,cAE9B,qBAAKF,MAAM,qBAAX,SACI,cAAC,IAAD,CACIG,QAAQ,EACRC,MAAO,gBACPC,aAAW,EACXC,SAAUrC,EAAWsC,MAAMC,IAC3BC,gBAAiB,SAAAjC,GAAI,OA/EjB,SAACA,GACrBR,EAAMA,MAAM6B,SAAS,CACjBC,KAAM,eACNC,QAASvB,IA4E4BiC,CAAgBjC,IACzCkC,kBAAmB,SAAAC,GAAI,OAzEjB,SAACA,GACvB,GAAa,OAATA,GAKJ,GAAI1C,EAAWsC,MAAMC,IAAK,CACtB,IAAMI,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACDH,EAAOI,cARtBC,OAAOC,MAAM,2EAuE0BR,CAAkBC,IAC7Cf,YAAa,kBAAMA,SAI3B,8BACI,wBAAQI,MAAM,YAAYmB,QA5C9B,WACRxB,GAAQ,GACRyB,IAAEC,KAAK,CACHvB,KAAM,OACNU,IAAK,gCACLhC,KAAM,CAAE8C,KAAMC,SAASC,eAAe,aAAalD,MACnDiC,MAAOtC,EAAWsC,MAAMC,KACxBiB,OAAO,EACPC,QAAS,IACTC,QAAS,SAASC,GACdC,QAAQC,IAAIF,GACZ5D,EAAMA,MAAM6B,SAAS,CACjBC,KAAM,WACNC,QAAS6B,KAEjBG,MAAO,SAASA,GACZF,QAAQC,IAAIC,OA4BR,oCAMZ,qBAAK/B,MAAM,SAAX,SACI,wBAAQmB,QAASvB,EAAjB,4B,gBClEGoC,mBAhCS,SAACC,GACvB,MAAO,CAAC3C,MAAO2C,EAAM3C,SA+BR0C,EA5Bf,SAAahE,GACX,OACE,sBAAKiC,GAAG,gBAAR,UACE,6BAAI,mDACJ,sJACA,uPACA,cAAC,EAAD,CAAOjC,MAAOA,IACd,cAAC,EAAD,CAAWA,MAAOA,IAClB,sBAAKgC,MAAM,cAAX,UACE,6BAAI,sEACJ,+BACE,kDACA,yDACA,sDACA,0DACA,6DACA,8CACA,gDACA,2CACA,oE,QC5BV,SAASkC,EAAS1D,GACd,IAAIc,EAAQ,GACZ,IAAK,IAAMT,KAAOL,EACdc,EAAM6C,KAAK,CACPb,KAAMzC,EACNP,MAAO,GAAK8D,KAAKC,WAIzB,OAAO/C,EAGX,SAASgD,EAAW9D,GAChB,IAAI+D,EAAM,EAEV,IAAK,IAAM1D,KAAOL,EACd+D,GAAO,GAAKH,KAAKC,SAGrB,OAAOE,EAGX,IAAMC,EAAe,CACjBlD,MAAO,CACH,CAACgC,KAAM,cAAehD,MAAO,GAC7B,CAACgD,KAAM,aAAchD,MAAO,GAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,GAC/B,CAACgD,KAAM,cAAehD,MAAO,GAC7B,CAACgD,KAAM,aAAchD,MAAO,GAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,GAC/B,CAACgD,KAAM,cAAehD,MAAO,GAC7B,CAACgD,KAAM,aAAchD,MAAO,GAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,GAC/B,CAACgD,KAAM,cAAehD,MAAO,IAC7B,CAACgD,KAAM,aAAchD,MAAO,IAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,IAC/B,CAACgD,KAAM,cAAehD,MAAO,IAC7B,CAACgD,KAAM,aAAchD,MAAO,IAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,IAC/B,CAACgD,KAAM,cAAehD,MAAO,IAC7B,CAACgD,KAAM,aAAchD,MAAO,IAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,IAC/B,CAACgD,KAAM,cAAehD,MAAO,IAC7B,CAACgD,KAAM,aAAchD,MAAO,IAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,IAC/B,CAACgD,KAAM,cAAehD,MAAO,IAC7B,CAACgD,KAAM,aAAchD,MAAO,IAC5B,CAACgD,KAAM,gBAAiBhD,MAAO,KAEnCE,KAAM,CACFC,MAAO,KAEX8B,MAAO,CACHC,IAAK,GACLiC,KAAM,KACNC,OAAQ,KACRC,SAAU,CACNC,EAAG,EACHC,EAAG,EACHC,EAAG,K,YCtDT9E,EAAQ+E,uBD2DG,WAAyD,IAA/Bd,EAA8B,uDAAtBO,EAAcQ,EAAQ,uCACrE,OAAQA,EAAOlD,MACb,IAAK,WACD,MAAO,CACHR,MAAO4C,EAASc,EAAOjD,SACvBvB,KAAM8D,EAAWU,EAAOjD,SACxBQ,MAAO0B,EAAM1B,OAGrB,IAAK,aACD,MAAO,CACLjB,MAAO2C,EAAM3C,MACbd,KAAMyD,EAAMzD,KACZ+B,MAAO,CACHC,IAAK,GACLiC,KAAM,KACNC,OAAQ,KACRC,SAAU,CACNC,EAAG,EACHC,EAAG,EACHC,EAAG,KAKjB,IAAK,eACD,MAAO,CACHxD,MAAO2C,EAAM3C,MACbd,KAAMyD,EAAMzD,KACZ+B,MAAO,CACHC,IAAKwC,EAAOjD,QAAQS,IACpBiC,KAAMO,EAAOjD,QAAQ0C,KACrBC,OAAQM,EAAOjD,QAAQ2C,OACvBC,SAAUK,EAAOjD,QAAQ4C,WAIrC,QACE,OAAOV,KCjG6BgB,iCAG7BjF,I,MCFfkF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKpF,MAASA,MAEhBuD,SAASC,eAAe,W","file":"static/js/main.6b8fed47.chunk.js","sourcesContent":["import ReactWordcloud from 'react-wordcloud';\r\nimport './Cloud.css'\r\n\r\nconst Cloud = (store) => {\r\n    var store_data = store.store.store.getState()\r\n\r\n    const determineColor = (value) => {\r\n        const freq = value / store_data.data.total;\r\n        const colors = new Map([\r\n            [0.2, 'blue'],\r\n            [0.3, 'navy'],\r\n            [0.4, 'indigo'],\r\n            [0.5, 'blueviolet'],\r\n            [0.6, 'purple'],\r\n            [0.7, 'magenta'],\r\n            [0.8, 'crimson'],\r\n        ])\r\n\r\n        for (const key of colors.keys()) {\r\n            if (freq < key) {\r\n                return colors.get(key);\r\n            }\r\n        }\r\n        \r\n        return \"black\";\r\n    }\r\n    \r\n    const callbacks = {\r\n        getWordColor: word => determineColor(word.value),\r\n        // getWordTooltip: word => `${word.text} (${word.value})`,\r\n    }\r\n\r\n    const options = {\r\n        rotations: 1,\r\n        rotationAngles: [0],\r\n        enableTooltip: false,\r\n        fontFamily: \"Comfortaa\",\r\n        // rotations: 2,\r\n        // rotationAngles: [-90, 0],\r\n        fontSizes: [20, 40]\r\n      };\r\n\r\n    return (\r\n        <ReactWordcloud\r\n            callbacks = {callbacks}\r\n            options = {options}\r\n            words = {store.store.words}\r\n            minSize={20}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Cloud;","import {useState} from 'react';\r\nimport {Recorder} from 'react-voice-recorder';\r\nimport $ from 'jquery';\r\nimport 'react-voice-recorder/dist/index.css';\r\nimport './UploadBox.css';\r\n\r\nconst UploadBox = (store) => {\r\n    var store_data = store.store.store.getState()\r\n    const [show, setShow] = useState(true);\r\n\r\n    const handleAudioStop = (data) => {\r\n        store.store.dispatch({\r\n            type: \"deliverAudio\",\r\n            payload: data\r\n        })\r\n    }\r\n\r\n    const handleAudioUpload = (file) => {\r\n        if (file === null) {\r\n            window.alert(\"No file available. Make sure you've stopped recording before uploading.\")\r\n            return;\r\n        }\r\n        // setShow(false);\r\n        if (store_data.audio.url) {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                if (typeof reader.result === \"string\") {\r\n                    // TODO Handle upload\r\n                    // Maybe make api request here?\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setShow(true);\r\n        store.store.dispatch({\r\n            type: \"resetAudio\",\r\n            payload: null\r\n        })\r\n    }\r\n\r\n    const handleFileUpload = (file) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            if (typeof reader.result === \"string\") {\r\n                // TODO Handle upload here too\r\n            }\r\n        }\r\n    }\r\n\r\n    const run = () => {\r\n        setShow(false);\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \"http://127.0.0.1:5000/process\",\r\n            data: { text: document.getElementById(\"textinput\").value,\r\n            audio: store_data.audio.url},\r\n            async: true,\r\n            timeout: 60000,\r\n            success: function(msg) {\r\n                console.log(msg)\r\n                store.store.dispatch({\r\n                    type: \"newWords\",\r\n                    payload: msg})\r\n            },\r\n            error: function(error) {\r\n                console.log(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // If a file exists, only show a button to clear the file\r\n    // Otherwise, show all the input methods\r\n    if (show) {\r\n        return (\r\n            <div>\r\n                <h1 class=\"center\"><u>Choose a method to generate words:</u></h1>\r\n                <textarea class=\"text-input-box\" id=\"textinput\">Enter text here</textarea>\r\n                <div class=\"fileupload\">\r\n                    <input type=\"file\" accept=\"audio/*\" />\r\n                </div>\r\n                <div class=\"recorder-container\">\r\n                    <Recorder \r\n                        record={true}\r\n                        title={\"New recording\"}\r\n                        showUIAudio\r\n                        audioURL={store_data.audio.url}\r\n                        handleAudioStop={data => handleAudioStop(data)}\r\n                        handleAudioUpload={file => handleAudioUpload(file)}\r\n                        handleReset={() => handleReset()}\r\n                    />\r\n                </div>\r\n                {/* <input type=\"text\" id=\"textinput\" placeholder=\"Enter text here\" /> */}\r\n                <div>\r\n                    <button class=\"runbutton\" onClick={run}>Create word cloud</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div class=\"center\">\r\n            <button onClick={handleReset}>Clear file</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadBox;","import Cloud from './components/Cloud.js';\r\nimport UploadBox from './components/UploadBox.js';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {words: state.words};\r\n}\r\n\r\nfunction App(store) {\r\n  return (\r\n    <div id=\"app-container\">\r\n      <h1><u>Tip of my Tongue</u></h1>\r\n      <p>Enter an audio file, record your own audio, or type in some text to generate a word cloud with closely related nouns!</p>\r\n      <p>This text or audio should contain a noun and then some descriptors. Longer phrases will take a longer time to finish, but will probably have better results. Check the bottom of this page for some things to try out!</p>\r\n      <Cloud store={store} />\r\n      <UploadBox store={store} />\r\n      <div class=\"suggestions\">\r\n        <h3><u>Suggestions for phrases to try out:</u></h3>\r\n        <ul>\r\n          <li>House with rooms</li>\r\n          <li>Countries with children</li>\r\n          <li>Animal that can swim</li>\r\n          <li>Bird with large wingspan</li>\r\n          <li>Building where food is made</li>\r\n          <li>Places to go</li>\r\n          <li>Shop with food</li>\r\n          <li>Dog breed</li>\r\n          <li>Method to analyze data</li>\r\n          {/* <li>Event to hack</li>\r\n          <li>Programming language</li> */}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","function getWords(data) {\r\n    var words = []\r\n    for (const key in data) {\r\n        words.push({\r\n            text: key,\r\n            value: 10 * Math.random()\r\n        })\r\n    }\r\n\r\n    return words;\r\n}\r\n\r\nfunction countWords(data) {\r\n    var sum = 0;\r\n    \r\n    for (const key in data) {\r\n        sum += 10 * Math.random();\r\n    }\r\n\r\n    return sum;\r\n}\r\n\r\nconst initialState = {\r\n    words: [\r\n        {text: \"HackNC 2021\", value: 1},\r\n        {text: \"Simi Singh\", value: 2},\r\n        {text: \"Win Geigerman\", value: 3},\r\n        {text: \"HackNC 2021\", value: 4},\r\n        {text: \"Simi Singh\", value: 5},\r\n        {text: \"Win Geigerman\", value: 6},\r\n        {text: \"HackNC 2021\", value: 7},\r\n        {text: \"Simi Singh\", value: 8},\r\n        {text: \"Win Geigerman\", value: 9},\r\n        {text: \"HackNC 2021\", value: 10},\r\n        {text: \"Simi Singh\", value: 11},\r\n        {text: \"Win Geigerman\", value: 12},\r\n        {text: \"HackNC 2021\", value: 13},\r\n        {text: \"Simi Singh\", value: 14},\r\n        {text: \"Win Geigerman\", value: 15},\r\n        {text: \"HackNC 2021\", value: 16},\r\n        {text: \"Simi Singh\", value: 17},\r\n        {text: \"Win Geigerman\", value: 18},\r\n        {text: \"HackNC 2021\", value: 19},\r\n        {text: \"Simi Singh\", value: 20},\r\n        {text: \"Win Geigerman\", value: 21},\r\n        {text: \"HackNC 2021\", value: 22},\r\n        {text: \"Simi Singh\", value: 23},\r\n        {text: \"Win Geigerman\", value: 24},\r\n    ],\r\n    data: {\r\n        total: 300,\r\n    },\r\n    audio: {\r\n        url: \"\",\r\n        blob: null,\r\n        chunks: null,\r\n        duration: {\r\n            h: 0,\r\n            m: 0,\r\n            s: 0\r\n          }\r\n    }\r\n  };\r\n  \r\n  export default function wordcloudReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case \"newWords\": {\r\n          return {\r\n              words: getWords(action.payload),\r\n              data: countWords(action.payload),\r\n              audio: state.audio,\r\n          }\r\n      }\r\n      case \"resetAudio\": {\r\n          return {\r\n            words: state.words,\r\n            data: state.data,\r\n            audio: {\r\n                url: \"\",\r\n                blob: null,\r\n                chunks: null,\r\n                duration: {\r\n                    h: 0,\r\n                    m: 0,\r\n                    s: 0\r\n                }\r\n            }\r\n        }   \r\n      }\r\n      case \"deliverAudio\": {\r\n          return {\r\n              words: state.words,\r\n              data: state.data,\r\n              audio: {\r\n                  url: action.payload.url,\r\n                  blob: action.payload.blob,\r\n                  chunks: action.payload.chunks,\r\n                  duration: action.payload.duration,\r\n              }\r\n          }\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { createStore } from 'redux';\r\nimport wordcloudReducer from './reducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst store = createStore(wordcloudReducer, composeWithDevTools());\r\n/* eslint-enable */\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store = {store} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}